# Cursor Rules for Jirabot Project

## Project Context
This is a Jira bot project designed to interact with Jira APIs and potentially integrate with other services like Slack, built with Python.

## Code Style Guidelines
- Use Python 3.8+ features
- Follow PEP 8 style guidelines
- Use type hints for better code clarity
- Follow Google or NumPy docstring conventions
- Use meaningful variable and function names
- Prefer async/await for I/O operations
- Use proper error handling with try/except blocks
- Use f-strings for string formatting

## Project Structure
- `/src` - Source code
- `/src/api` - API related code (Jira, Slack, etc.)
- `/src/utils` - Utility functions
- `/src/models` - Data models and schemas
- `/src/config` - Configuration files
- `/scripts` - Download scripts (epic and story downloaders)
- `/tests` - Test files using pytest
- `/docs` - Documentation
- `requirements.txt` - Python dependencies
- `pyproject.toml` - Project configuration
- `Makefile` - Build automation and shortcuts

## Development Guidelines
- Always include proper error handling
- Use logging module for debugging and monitoring
- Use environment variables for sensitive data
- Follow REST API best practices
- Implement proper rate limiting for API calls
- Add unit tests using pytest
- Use virtual environments (venv or conda)
- Pin dependency versions in requirements.txt

## Development Workflow (CRITICAL - Always Follow)
### ðŸš¨ ALWAYS Activate Virtual Environment First
- **BEFORE ANY PYTHON COMMANDS**: `source venv/bin/activate`
- This is MANDATORY for running tests, code, or any Python operations
- If commands fail with import errors, check venv activation

### Testing Requirements (99% Coverage Standard)
- **Run tests**: `python -m pytest tests/ --cov=src --cov=scripts/download_story_subtasks --cov=scripts/download_epic_issues --cov-report=term-missing`
- **Minimum coverage**: 80% (project currently at 99%)
- **Test types**: Unit, integration, async, CLI tests
- **Mocking**: Mock all external dependencies (JiraClient, file I/O, API calls)
- **Async testing**: Use `@pytest.mark.asyncio` for async functions
- **Fixtures**: Use realistic test data matching Pydantic model structures

### Code Quality Checks (Run Before Committing)
- **Format**: `black src tests scripts/*.py`
- **Lint**: `flake8 src tests scripts/*.py`
- **Type check**: `mypy src scripts/*.py`
- **All at once**: `black src tests scripts/*.py && flake8 src tests scripts/*.py && mypy src scripts/*.py`
- **Using Makefile**: `make quality` (recommended)

### Git Workflow and Commit Standards
- **Branch naming**: `feature/description` or `fix/description`
- **Commit types**: `feat:`, `fix:`, `test:`, `docs:`, `refactor:`, `chore:`
- **Commit format**:
  ```
  type: brief description (50 chars max)

  - Detailed bullet point 1
  - Detailed bullet point 2
  - Reference issues: #123
  ```
- **Commit in logical groups**: Foundation â†’ Core code â†’ Tests â†’ Documentation
- **Always test before committing**: Run full test suite with coverage

## Command Workflow Template (Follow This Sequence)
### When Making Any Changes:
```bash
# 1. MANDATORY: Activate virtual environment
source venv/bin/activate

# 2. Make your changes following coding standards

# 3. Run comprehensive tests
python -m pytest tests/ --cov=src --cov=scripts/download_story_subtasks --cov=scripts/download_epic_issues --cov-report=term-missing

# 4. Check code quality
black src tests scripts/*.py && flake8 src tests scripts/*.py && mypy src scripts/*.py

# 5. Stage and commit in logical groups
git add [related-files]
git commit -m "type: brief description

- Detailed explanation point 1
- Detailed explanation point 2"

# 6. Push changes
git push origin branch-name
```

### When Running Application Scripts:
```bash
# Using Makefile (recommended)
make story PROJ-123
make epic PROJ-456

# Or directly with scripts
source venv/bin/activate
python scripts/download_story_subtasks.py PROJ-123 -v
python scripts/download_epic_issues.py PROJ-456 -v
```

## Dependencies
- Use latest stable versions of packages
- Prefer well-maintained packages from PyPI
- Use requests or httpx for HTTP calls
- Use pydantic for data validation
- Use python-dotenv for environment variables
- Keep dependencies minimal and focused

## Security
- Never commit API keys or sensitive data
- Use proper authentication mechanisms
- Validate all inputs using pydantic or similar
- Sanitize data before processing
- Use secrets module for sensitive operations

## API Integration
- Handle API rate limits gracefully with backoff
- Implement retry logic for failed requests
- Cache responses when appropriate using functools.lru_cache
- Use proper HTTP status code handling
- Use async/await for concurrent API calls

## Testing (99% Coverage Achieved!)
- Use pytest for testing with pytest.ini configuration
- **Coverage requirement**: Minimum 80%, currently at 99%
- Use realistic fixtures matching Pydantic model structures
- **Mock external dependencies**: JiraClient, file I/O, API calls, async operations
- Test both success and error scenarios
- **Async testing**: Use `@pytest.mark.asyncio` and AsyncMock for async functions
- **Test structure**: TestClass â†’ fixtures â†’ test methods with descriptive names
- **Integration tests**: Test complete workflows end-to-end
- **CLI testing**: Use Click's CliRunner for command-line interface tests

## File and Project Management
- **Output directory**: `output/` remains untracked (contains generated files)
- **Virtual environment**: `venv/` excluded from git
- **Configuration**: Use `pytest.ini` for test settings, `pyproject.toml` for project config
- **Documentation**: Keep README.md and CONTRIBUTING.md updated with workflow changes
- **Environment**: Use `env_template.txt` for environment variable documentation
